
service: SP-AUTH
provider:
  name: aws
  runtime: python3.6    # jose(3.0.1) jwt package lacks support for py-3.7
  stage: ${opt:stage, 'dev'}
  region: ${file(../config.${self:provider.stage}.json):REGION}
  environment:
    AUTH0_CLIENT_ID: ${file(../config.${self:provider.stage}.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_PUBLIC_KEY: ${file(../public_key.${self:provider.stage})}
    AUTHORIZER_ARN: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:provider.stage}-SP-AUTH-auth
  apiGateway:
    restApiId:
      Ref: spWebapiApiGateway
    restApiResources:
      Fn::GetAtt:
        - spWebapiApiGateway
        - RootResourceId

custom:
  region: ${file(../config.${self:provider.stage}.json):REGION}
  pythonRequirements:
    dockerizePip: true
    fileName: ../requirements.txt
    slim: true
  prune:
    automatic: true
    number: 3

functions:
  auth:
    handler: auth.auth
    name: ${self:provider.stage}-${self:service}-auth
    cors: true

package:
  exclude:
    - ./**
  include:
    - auth.py
    - config.yaml
    - package.json

resources:
  Resources:
    spWebapiApiGateway:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: SP-API-GATEWAY-${self:provider.stage}

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: spAuthorizer
        RestApiId:
          Ref: spWebapiApiGateway
        Type: TOKEN
        IdentityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
        AuthorizerUri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/${self:provider.environment.AUTHORIZER_ARN}/invocations
        AuthorizerCredentials:
          Fn::GetAtt:
            - ApiGatewayAuthorizerRole
            - Arn

    ApiGatewayAuthorizerRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'apigateway.amazonaws.com'
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: 'InvokeAuthorizerFunction-${self:provider.stage}'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - lambda:InvokeAsync
                    - lambda:InvokeFunction
                  Resource: ${self:provider.environment.AUTHORIZER_ARN}

  # Api Gateway resources to make the API Base URL unchanging
  Outputs:
    apiGatewayRestApiId:
      Value:
        Ref: spWebapiApiGateway
      Export:
        Name: sp-${self:provider.stage}-ApiGateway-restApiId

    apiGatewayRestApiRootResourceId:
      Value:
          Fn::GetAtt:
          - spWebapiApiGateway
          - RootResourceId
      Export:
        Name: sp-${self:provider.stage}-ApiGateway-rootResourceId

    apiGatewayAuthorizer:
      Value:
        Ref: ApiGatewayAuthorizer
      Export:
        Name: sp-${self:provider.stage}-ApiGateway-Authorizer


plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
  - serverless-prune-plugin
